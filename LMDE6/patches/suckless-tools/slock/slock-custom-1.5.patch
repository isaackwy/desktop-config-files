--- a/slock/config.def.h
+++ b/slock/config.def.h
@@ -1,12 +1,41 @@
 /* user and group to drop privileges to */
 static const char *user  = "nobody";
-static const char *group = "nogroup";
+static const char *group = "nobody";
+
+/*Font settings for the time text*/
+static const float textsize=80.0;
+static const char* textfamily="ubuntu";
+static const double textcolorred=255;
+static const double textcolorgreen=255;
+static const double textcolorblue=255;
 
 static const char *colorname[NUMCOLS] = {
-	[INIT] =   "black",     /* after initialization */
-	[INPUT] =  "#005577",   /* during input */
-	[FAILED] = "#CC3333",   /* wrong password */
+	[BACKGROUND] =   "black",     /* after initialization */
+	[INIT] =   "#2e2e2e",     /* after initialization */
+	[INPUT] =  "#199ca8",   /* during input */
+	[FAILED] = "#e82126",   /* wrong password */
 };
 
 /* treat a cleared input like a wrong password (color) */
 static const int failonclear = 1;
+
+/* Background image path, should be available to the user above */
+static const char* background_image = "/home/user/Wallpapers/1RKO_1920x1200.jpg";
+
+/* insert grid pattern with scale 1:1, the size can be changed with logosize */
+static const int logosize = 28;
+static const int logow = 12;	/* grid width and height for right center alignment*/
+static const int logoh = 6;
+
+static XRectangle rectangles[9] = {
+	/* x	y	w	h */
+	{ 0,	3,	1,	3 },
+	{ 1,	3,	2,	1 },
+	{ 0,	5,	8,	1 },
+	{ 3,	0,	1,	5 },
+	{ 5,	3,	1,	2 },
+	{ 7,	3,	1,	2 },
+	{ 8,	3,	4,	1 },
+	{ 9,	4,	1,	2 },
+	{ 11,	4,	1,	2 },
+};
--- a/slock/config.mk
+++ b/slock/config.mk
@@ -10,12 +10,20 @@
 X11INC = /usr/X11R6/include
 X11LIB = /usr/X11R6/lib
 
+# Xinerama, comment if you don't want it
+XINERAMALIBS  = -lXinerama
+XINERAMAFLAGS = -DXINERAMA
+
+# freetype
+FREETYPELIBS = -lXft
+FREETYPEINC = /usr/include/freetype2
+
 # includes and libs
-INCS =
-LIBS = -lc -lpam -lX11 -lXrandr
+INCS = -I${FREETYPEINC}
+LIBS = -lc -lpam -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lXrandr -lImlib2 -lcairo -lpthread
 
 # flags
-CPPFLAGS += -DVERSION=\"${VERSION}\" -D_DEFAULT_SOURCE -DHAVE_PAM
+CPPFLAGS += -DVERSION=\"${VERSION}\" -D_DEFAULT_SOURCE -DHAVE_PAM ${XINERAMAFLAGS}
 CFLAGS += -std=c99 -pedantic -Wall ${INCS} ${CPPFLAGS}
 LDFLAGS += ${LIBS}
 COMPATSRC = explicit_bzero.c
--- a/slock/slock.c
+++ b/slock/slock.c
@@ -1,10 +1,12 @@
 /* See LICENSE file for license details. */
 #define _XOPEN_SOURCE 500
+#define LENGTH(X)       (sizeof X / sizeof X[0])
 #if HAVE_SHADOW_H
 #include <shadow.h>
 #endif
 
 #include <ctype.h>
+#include <cairo/cairo-xlib.h>
 #include <errno.h>
 #include <grp.h>
 #include <pwd.h>
@@ -15,9 +17,17 @@
 #include <unistd.h>
 #include <sys/types.h>
 #include <X11/extensions/Xrandr.h>
+#ifdef XINERAMA
+#include <X11/extensions/Xinerama.h>
+#endif
 #include <X11/keysym.h>
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
+#include <X11/Xft/Xft.h>
+#include <Imlib2.h>
+
+#include <pthread.h>
+#include <time.h>
 
 #include "arg.h"
 #include "util.h"
@@ -37,17 +47,28 @@
 #endif
 
 enum {
+	BACKGROUND,
 	INIT,
 	INPUT,
 	FAILED,
 	NUMCOLS
 };
 
+#include "config.h"
+
+Imlib_Image image;
+
 struct lock {
 	int screen;
 	Window root, win;
 	Pixmap pmap;
+	Pixmap bgmap;
 	unsigned long colors[NUMCOLS];
+	unsigned int x, y;
+	unsigned int xoff, yoff, mw, mh;
+	Drawable drawable;
+	GC gc;
+	XRectangle rectangles[LENGTH(rectangles)];
 };
 
 struct xrandr {
@@ -56,7 +77,14 @@
 	int errbase;
 };
 
-#include "config.h"
+struct displayData{
+	struct lock **locks;
+	Display* dpy;
+	int nscreens;
+	cairo_t **crs;
+	cairo_surface_t **surfaces;
+};
+static pthread_mutex_t mutex= PTHREAD_MUTEX_INITIALIZER;
 
 static void
 die(const char *errstr, ...)
@@ -139,9 +167,75 @@
 	return hash;
 }
 
+/* Function that displays given time on the given screen */
+/* Date outputting adapted from https://stackoverflow.com/a/37658735 */
+static void
+refresh(Display *dpy, Window win, int screen, struct tm time, cairo_t* cr, cairo_surface_t* sfc)
+{
+	static char tm[22] = "", tm_formatted[22] = "";
+	int xpos, ypos;
+	xpos = DisplayWidth(dpy, screen)/3.4;
+	ypos = 100;
+	strftime(tm, sizeof(tm), "%a %b %d %Y %R", &time);
+	sprintf(tm_formatted, "%s", tm);
+	XClearWindow(dpy, win);
+	cairo_set_source_rgb(cr, textcolorred, textcolorgreen, textcolorblue);
+	cairo_select_font_face(cr, textfamily, CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_BOLD);
+	cairo_set_font_size(cr, textsize);
+	cairo_move_to(cr, xpos, ypos);
+	cairo_show_text(cr, tm);
+	cairo_surface_flush(sfc);
+	XFlush(dpy);
+}
+
+/*Thread that keeps track of time and refreshes it every 5 seconds */
+static void*
+displayTime(void* input)
+{
+	struct displayData* displayData=(struct displayData*)input;
+	while (1) {
+		pthread_mutex_lock(&mutex); /*Mutex to prevent interference with refreshing screen while typing password*/
+		time_t rawtime;
+		time(&rawtime);
+		struct tm tm = *localtime(&rawtime);
+		for (int k = 0; k < displayData->nscreens; k++) {
+			refresh(displayData->dpy, displayData->locks[k]->win, displayData->locks[k]->screen, tm,displayData->crs[k], displayData->surfaces[k]);
+		}
+		pthread_mutex_unlock(&mutex);
+		sleep(5);
+	}
+	return NULL;
+}
+
+static void
+resizerectangles(struct lock *lock)
+{
+	int i;
+
+	for (i = 0; i < LENGTH(rectangles); i++){
+		lock->rectangles[i].x = (rectangles[i].x * logosize)
+                                + lock->xoff + ((lock->mw) / 2) - (logow / 2 * logosize);
+		lock->rectangles[i].y = (rectangles[i].y * logosize)
+                                + lock->yoff + ((lock->mh) / 2) - (logoh / 2 * logosize);
+		lock->rectangles[i].width = rectangles[i].width * logosize;
+		lock->rectangles[i].height = rectangles[i].height * logosize;
+	}
+}
+
+static void
+drawlogo(Display *dpy, struct lock *lock, int color)
+{
+	XSetForeground(dpy, lock->gc, lock->colors[color]);
+	XFillRectangles(dpy, lock->drawable, lock->gc, lock->rectangles, LENGTH(rectangles));
+ 	lock->drawable = lock->bgmap;
+	XCopyArea(dpy, lock->drawable, lock->win, lock->gc, 0, 0, lock->x, lock->y, 0, 0);
+	XSync(dpy, False);
+}
+
 static void
 readpw(Display *dpy, struct xrandr *rr, struct lock **locks, int nscreens,
-       const char *hash)
+       const char *hash, cairo_t **crs,cairo_surface_t **surfaces)
+
 {
 	XRRScreenChangeNotifyEvent *rre;
 	char buf[32], passwd[256], *inputhash;
@@ -208,16 +302,20 @@
 			}
 			color = len ? INPUT : ((failure || failonclear) ? FAILED : INIT);
 			if (running && oldc != color) {
+		        pthread_mutex_lock(&mutex);    /*Stop the time refresh thread from interfering*/
 				for (screen = 0; screen < nscreens; screen++) {
-					XSetWindowBackground(dpy,
-					                     locks[screen]->win,
-					                     locks[screen]->colors[color]);
-					XClearWindow(dpy, locks[screen]->win);
+					drawlogo(dpy, locks[screen], color);
+					time_t rawtime;
+					time(&rawtime);
+					/*Redraw the time after screen cleared*/
+	                refresh(dpy, locks[screen]->win, locks[screen]->screen, *localtime(&rawtime),crs[screen], surfaces[screen]);
 				}
+				pthread_mutex_unlock(&mutex);
 				oldc = color;
 			}
 		} else if (rr->active && ev.type == rr->evbase + RRScreenChangeNotify) {
 			rre = (XRRScreenChangeNotifyEvent*)&ev;
+			pthread_mutex_lock(&mutex);    /*Stop the time refresh thread from interfering.*/
 			for (screen = 0; screen < nscreens; screen++) {
 				if (locks[screen]->win == rre->window) {
 					if (rre->rotation == RR_Rotate_90 ||
@@ -231,6 +329,8 @@
 					break;
 				}
 			}
+
+				pthread_mutex_unlock(&mutex);
 		} else {
 			for (screen = 0; screen < nscreens; screen++)
 				XRaiseWindow(dpy, locks[screen]->win);
@@ -247,6 +347,10 @@
 	XColor color, dummy;
 	XSetWindowAttributes wa;
 	Cursor invisible;
+#ifdef XINERAMA
+	XineramaScreenInfo *info;
+	int n;
+#endif
 
 	if (dpy == NULL || screen < 0 || !(lock = malloc(sizeof(struct lock))))
 		return NULL;
@@ -254,27 +358,61 @@
 	lock->screen = screen;
 	lock->root = RootWindow(dpy, lock->screen);
 
+	if(image)
+	{
+		lock->bgmap = XCreatePixmap(dpy, lock->root, DisplayWidth(dpy, lock->screen), DisplayHeight(dpy, lock->screen), DefaultDepth(dpy, lock->screen));
+		imlib_context_set_display(dpy);
+		imlib_context_set_visual(DefaultVisual(dpy, lock->screen));
+		imlib_context_set_colormap(DefaultColormap(dpy, lock->screen));
+		imlib_context_set_drawable(lock->bgmap);
+		imlib_render_image_on_drawable(0, 0);
+		imlib_free_image();
+	}
+
 	for (i = 0; i < NUMCOLS; i++) {
 		XAllocNamedColor(dpy, DefaultColormap(dpy, lock->screen),
 		                 colorname[i], &color, &dummy);
 		lock->colors[i] = color.pixel;
 	}
 
+	lock->x = DisplayWidth(dpy, lock->screen);
+	lock->y = DisplayHeight(dpy, lock->screen);
+#ifdef XINERAMA
+	if ((info = XineramaQueryScreens(dpy, &n))) {
+		lock->xoff = info[0].x_org;
+		lock->yoff = info[0].y_org;
+		lock->mw = info[0].width;
+		lock->mh = info[0].height;
+	} else
+#endif
+	{
+		lock->xoff = lock->yoff = 0;
+		lock->mw = lock->x;
+		lock->mh = lock->y;
+	}
+	lock->drawable = XCreatePixmap(dpy, lock->root,
+            lock->x, lock->y, DefaultDepth(dpy, screen));
+	lock->gc = XCreateGC(dpy, lock->root, 0, NULL);
+	XSetLineAttributes(dpy, lock->gc, 1, LineSolid, CapButt, JoinMiter);
+
 	/* init */
 	wa.override_redirect = 1;
-	wa.background_pixel = lock->colors[INIT];
+	wa.background_pixel = lock->colors[BACKGROUND];
 	lock->win = XCreateWindow(dpy, lock->root, 0, 0,
-	                          DisplayWidth(dpy, lock->screen),
-	                          DisplayHeight(dpy, lock->screen),
+	                          lock->x, lock->y,
 	                          0, DefaultDepth(dpy, lock->screen),
 	                          CopyFromParent,
 	                          DefaultVisual(dpy, lock->screen),
 	                          CWOverrideRedirect | CWBackPixel, &wa);
+	if(lock->bgmap)
+		XSetWindowBackgroundPixmap(dpy, lock->win, lock->bgmap);
 	lock->pmap = XCreateBitmapFromData(dpy, lock->win, curs, 8, 8);
 	invisible = XCreatePixmapCursor(dpy, lock->pmap, lock->pmap,
 	                                &color, &color, 0, 0);
 	XDefineCursor(dpy, lock->win, invisible);
 
+	resizerectangles(lock);
+
 	/* Try to grab mouse pointer *and* keyboard for 600ms, else fail the lock */
 	for (i = 0, ptgrab = kbgrab = -1; i < 6; i++) {
 		if (ptgrab != GrabSuccess) {
@@ -295,6 +433,7 @@
 				XRRSelectInput(dpy, lock->win, RRScreenChangeNotifyMask);
 
 			XSelectInput(dpy, lock->root, SubstructureNotifyMask);
+			drawlogo(dpy, lock, INIT);
 			return lock;
 		}
 
@@ -352,9 +491,35 @@
 		die("slock: crypt: %s\n", strerror(errno));
 #endif
 
+	XInitThreads();
 	if (!(dpy = XOpenDisplay(NULL)))
 		die("slock: cannot open display\n");
 
+	/* Load picture */
+ 	Imlib_Image buffer = imlib_load_image(background_image);
+	imlib_context_set_image(buffer);
+ 	int background_image_width = imlib_image_get_width();
+	int background_image_height = imlib_image_get_height();
+
+	/* Create an image to be rendered */
+	Screen *scr = ScreenOfDisplay(dpy, DefaultScreen(dpy));
+	image = imlib_create_image(scr->width, scr->height);
+	imlib_context_set_image(image);
+
+	/* Fill the image for every X monitor */
+	XRRMonitorInfo *monitors;
+	int number_of_monitors;
+	monitors = XRRGetMonitors(dpy, RootWindow(dpy, XScreenNumberOfScreen(scr)), True, &number_of_monitors);
+
+	int i;
+	for (i = 0; i < number_of_monitors; i++) {
+		imlib_blend_image_onto_image(buffer, 0, 0, 0, background_image_width, background_image_height, monitors[i].x, monitors[i].y, monitors[i].width, monitors[i].height);
+        }
+
+	/* Clean up */
+	imlib_context_set_image(buffer);
+	imlib_free_image();
+	imlib_context_set_image(image);
 
 	/* check for Xrandr support */
 	rr.active = XRRQueryExtension(dpy, &rr.evbase, &rr.errbase);
@@ -390,7 +555,41 @@
 	}
 
 	/* everything is now blank. Wait for the correct password */
-	readpw(dpy, &rr, locks, nscreens, hash);
+	pthread_t thredid;
+	/* Create Cairo drawables upon which the time will be shown. */
+	struct displayData displayData;
+	cairo_surface_t **surfaces;
+	cairo_t **crs;
+	if (!(surfaces=calloc(nscreens, sizeof(cairo_surface_t*)))){
+		die("Out of memory");
+	}
+	if (!(crs=calloc(nscreens, sizeof(cairo_t*)))){
+		die("Out of memory");
+	}
+	for (int k = 0; k < nscreens; k++){
+		Drawable win=locks[k]->win;
+		int screen=locks[k]->screen;
+		XMapWindow(dpy, win);
+		surfaces[k]=cairo_xlib_surface_create(dpy, win, DefaultVisual(dpy, screen), DisplayWidth(dpy, screen), DisplayHeight(dpy, screen));
+		crs[k]=cairo_create(surfaces[k]);
+	}
+	displayData.dpy=dpy;
+	displayData.locks=locks;
+	displayData.nscreens=nscreens;
+	displayData.crs=crs;
+	displayData.surfaces=surfaces;
+	/* Start the thread that redraws time every 5 seconds */
+	pthread_create(&thredid, NULL, displayTime, &displayData);
+	/* Wait for the password */
+	readpw(dpy, &rr, locks, nscreens, hash, crs, surfaces);
+
+	for (nlocks = 0, s = 0; s < nscreens; s++) {
+		XFreePixmap(dpy, locks[s]->drawable);
+		XFreeGC(dpy, locks[s]->gc);
+	}
+
+	XSync(dpy, 0);
+	XCloseDisplay(dpy);
 
 #ifdef HAVE_PAM
 	pam_destroy();
