--- a/config.def.h
+++ b/config.def.h
@@ -2,6 +2,13 @@
 static const char *user  = "nobody";
 static const char *group = "nobody";
 
+/*Font settings for the time text*/
+static const float textsize=64.0;
+static const char* textfamily="noto sans";
+static const double textcolorred=255;
+static const double textcolorgreen=255;
+static const double textcolorblue=255;
+
 static const char *colorname[NUMCOLS] = {
 	[BACKGROUND] =   "black",     /* after initialization */
 	[INIT] =   "#2d2d2d",     /* after initialization */
--- a/config.mk
+++ b/config.mk
@@ -20,7 +20,7 @@
 
 # includes and libs
 INCS = -I. -I/usr/include -I${X11INC} -I${FREETYPEINC}
-LIBS = -L/usr/lib -lc -lcrypt -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lXext -lXrandr -lImlib2
+LIBS = -L/usr/lib -lc -lcrypt -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lXext -lXrandr -lImlib2 -lcairo -lpthread
 
 # flags
 CPPFLAGS = -DVERSION=\"${VERSION}\" -D_DEFAULT_SOURCE -DHAVE_SHADOW_H ${XINERAMAFLAGS}
--- a/slock.c
+++ b/slock.c
@@ -6,6 +6,7 @@
 #endif
 
 #include <ctype.h>
+#include <cairo/cairo-xlib.h>
 #include <errno.h>
 #include <grp.h>
 #include <pwd.h>
@@ -25,6 +26,8 @@
 #include <X11/Xft/Xft.h>
 #include <Imlib2.h>
 
+#include <pthread.h>
+#include <time.h>
 #include "arg.h"
 #include "util.h"
 
@@ -61,6 +64,15 @@
 	int errbase;
 };
 
+struct displayData{
+	struct lock **locks;
+	Display* dpy;
+	int nscreens;
+	cairo_t **crs;
+	cairo_surface_t **surfaces;
+};
+static pthread_mutex_t mutex= PTHREAD_MUTEX_INITIALIZER;
+
 static void
 die(const char *errstr, ...)
 {
@@ -139,6 +151,46 @@
 	return hash;
 }
 
+/* Function that displays given time on the given screen */
+/* Date outputting adapted from https://stackoverflow.com/a/37658735 */
+static void
+refresh(Display *dpy, Window win, int screen, struct tm time, cairo_t* cr, cairo_surface_t* sfc)
+{
+	static char tm[22] = "", tm_formatted[22] = "";
+	int xpos, ypos;
+	xpos = DisplayWidth(dpy, screen)/3.3;
+	ypos = 100;
+	strftime(tm, sizeof(tm), "%a %b %d %Y %R", &time);
+	sprintf(tm_formatted, "%s", tm);
+	XClearWindow(dpy, win);
+	cairo_set_source_rgb(cr, textcolorred, textcolorgreen, textcolorblue);
+	cairo_select_font_face(cr, textfamily, CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_BOLD);
+	cairo_set_font_size(cr, textsize);
+	cairo_move_to(cr, xpos, ypos);
+	cairo_show_text(cr, tm);
+	cairo_surface_flush(sfc);
+	XFlush(dpy);
+}
+
+/*Thread that keeps track of time and refreshes it every 5 seconds */
+static void*
+displayTime(void* input)
+{
+	struct displayData* displayData=(struct displayData*)input;
+	while (1) {
+		pthread_mutex_lock(&mutex); /*Mutex to prevent interference with refreshing screen while typing password*/
+		time_t rawtime;
+		time(&rawtime);
+		struct tm tm = *localtime(&rawtime);
+		for (int k = 0; k < displayData->nscreens; k++) {
+			refresh(displayData->dpy, displayData->locks[k]->win, displayData->locks[k]->screen, tm,displayData->crs[k], displayData->surfaces[k]);
+		}
+		pthread_mutex_unlock(&mutex);
+		sleep(5);
+	}
+	return NULL;
+}
+
 static void
 resizerectangles(struct lock *lock)
 {
@@ -166,7 +218,7 @@
 
 static void
 readpw(Display *dpy, struct xrandr *rr, struct lock **locks, int nscreens,
-       const char *hash)
+       const char *hash, cairo_t **crs,cairo_surface_t **surfaces)
 {
 	XRRScreenChangeNotifyEvent *rre;
 	char buf[32], passwd[256], *inputhash;
@@ -229,13 +281,20 @@
 			}
 			color = len ? INPUT : ((failure || failonclear) ? FAILED : INIT);
 			if (running && oldc != color) {
+		        pthread_mutex_lock(&mutex);    /*Stop the time refresh thread from interfering*/
 				for (screen = 0; screen < nscreens; screen++) {
 					drawlogo(dpy, locks[screen], color);
+					time_t rawtime;
+					time(&rawtime);
+					/*Redraw the time after screen cleared*/
+	                refresh(dpy, locks[screen]->win, locks[screen]->screen, *localtime(&rawtime),crs[screen], surfaces[screen]);
 				}
+				pthread_mutex_unlock(&mutex);
 				oldc = color;
 			}
 		} else if (rr->active && ev.type == rr->evbase + RRScreenChangeNotify) {
 			rre = (XRRScreenChangeNotifyEvent*)&ev;
+			pthread_mutex_lock(&mutex);    /*Stop the time refresh thread from interfering.*/
 			for (screen = 0; screen < nscreens; screen++) {
 				if (locks[screen]->win == rre->window) {
 					if (rre->rotation == RR_Rotate_90 ||
@@ -249,6 +308,8 @@
 					break;
 				}
 			}
+
+				pthread_mutex_unlock(&mutex);
 		} else {
 			for (screen = 0; screen < nscreens; screen++)
 				XRaiseWindow(dpy, locks[screen]->win);
@@ -420,6 +481,7 @@
 	if (!crypt("", hash))
 		die("slock: crypt: %s\n", strerror(errno));
 
+	XInitThreads();
 	if (!(dpy = XOpenDisplay(NULL)))
 		die("slock: cannot open display\n");
 
@@ -491,7 +553,33 @@
 	}
 
 	/* everything is now blank. Wait for the correct password */
-	readpw(dpy, &rr, locks, nscreens, hash);
+	pthread_t thredid;
+	/* Create Cairo drawables upon which the time will be shown. */
+	struct displayData displayData;
+	cairo_surface_t **surfaces;
+	cairo_t **crs;
+	if (!(surfaces=calloc(nscreens, sizeof(cairo_surface_t*)))){
+		die("Out of memory");
+	}
+	if (!(crs=calloc(nscreens, sizeof(cairo_t*)))){
+		die("Out of memory");
+	}
+	for (int k = 0; k < nscreens; k++){
+		Drawable win=locks[k]->win;
+		int screen=locks[k]->screen;
+		XMapWindow(dpy, win);
+		surfaces[k]=cairo_xlib_surface_create(dpy, win, DefaultVisual(dpy, screen), DisplayWidth(dpy, screen), DisplayHeight(dpy, screen));
+		crs[k]=cairo_create(surfaces[k]);
+	}
+	displayData.dpy=dpy;
+	displayData.locks=locks;
+	displayData.nscreens=nscreens;
+	displayData.crs=crs;
+	displayData.surfaces=surfaces;
+	/* Start the thread that redraws time every 5 seconds */
+	pthread_create(&thredid, NULL, displayTime, &displayData);
+	/* Wait for the password */
+	readpw(dpy, &rr, locks, nscreens, hash, crs, surfaces);
 
 	for (nlocks = 0, s = 0; s < nscreens; s++) {
 		XFreePixmap(dpy, locks[s]->drawable);
